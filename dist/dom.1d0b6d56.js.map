{"version":3,"sources":["dom.js"],"names":["window","dom","create","string","container","document","createElement","innerHTML","trim","content","firstChild","after","node","node2","parentNode","insertBefore","nextSibling","before","append","parent","appendChild","wrap","remove","removeChild","empty","array","x","push","attr","name","value","arguments","length","setAttribute","getAttribute","text","innerText","textContent","html","style","Object","object","key","class","add","className","classList","contains","on","eventName","fn","addEventListener","off","removeEventListener","find","selector","scope","querySelectorAll","children","siblings","Array","from","filter","n","next","nodeType","previous","previousSibling","each","nodeList","i","call","index","list"],"mappings":"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","file":"dom.1d0b6d56.js","sourceRoot":"..\\src","sourcesContent":["/*window.dom = {\r\n    create(tagName) {\r\n        return document.createElement(tagName);\r\n        //将原生API封装起来，由简短的函数调用\r\n        //创建文件\r\n    }\r\n};*/\r\n\r\n//万能的创建HTML语言\r\nwindow.dom = {\r\n    create(string) {\r\n        const container = document.createElement(\"template\");\r\n        //template 是可以容纳任意元素的。\r\n        container.innerHTML = string.trim();\r\n        //trim是为了把两边的空格去掉\r\n        return container.content.firstChild;\r\n    },\r\n    //在节点后边插入一个节点\r\n    after(node, node2) {\r\n        node.parentNode.insertBefore(node2, node.nextSibling);\r\n        //找到这个节点的爸爸，在这个爸爸之前插入一个节点\r\n    },\r\n    //在节点前边插入一个节点\r\n    before(node, node2) {\r\n        node.parentNode.insertBefore(node2, node)\r\n    },\r\n    //给节点加个一个爸爸\r\n    append(parent, node) {\r\n        parent.appendChild(node)\r\n    },\r\n    //包含中包含节点\r\n    wrap(node, parent) {\r\n        dom.before(node, parent) //先在节点之前放个爸爸\r\n        dom.append(parent, node) //在爸爸里面创建一个节点\r\n    },\r\n\r\n    //删除节点\r\n    remove(node) {\r\n        node.parentNode.removeChild(node)\r\n        return (node)\r\n    },\r\n    //删除全部（也有剪切之后要加点东西之后再使用）\r\n    empty(node) {\r\n        //const { childNodes } = node //直接从node获得节点\r\n        const array = []\r\n        let x = node.firstChild //第一个大儿子\r\n        while (x) {\r\n            array.push(dom.remove(node.firstChild)) //删除第一个大儿子\r\n            x = node.firstChild //获取最新的大儿子\r\n        }\r\n        return array\r\n\r\n    },\r\n    //修改节点的ID名称\r\n    //重载：根据长度不同写不同的代码\r\n    attr(node, name, value) {\r\n        if (arguments.length === 3) { //如果长度为三就实现写的功能\r\n            node.setAttribute(name, value)\r\n        } else if (arguments.length === 2) {\r\n            return node.getAttribute(name) //如果长度为二就实现读的功能\r\n        }\r\n\r\n    },\r\n\r\n    //写和读文本(这种写代码的方式即为适配（根据不同的需求来选择 ）\r\n    text(node, string) {\r\n        if (arguments.length === 2) {\r\n            if ('innerText' in node) {\r\n                node.innerText = string //IE\r\n            } else {\r\n                node.textContent = string //chrome/firefox\r\n            }\r\n        } else if (arguments === 1) {\r\n            if ('innerText' in node) {\r\n                return node.innerText //IE\r\n            } else {\r\n                return node.textContent //chrome/firefox\r\n            }\r\n        }\r\n\r\n\r\n\r\n\r\n    },\r\n\r\n    //写和读网页\r\n    html(node, string) {\r\n        if (arguments.length === 2) {\r\n            node.innerHTML = string\r\n\r\n        } else if (arguments === 1) {\r\n            return node.innerHTML\r\n        }\r\n\r\n\r\n    },\r\n    // 加边框(写和读)\r\n    style(node, name, value) {\r\n\r\n        if (arguments.length === 3) {\r\n            //dom.style(div,'color','red')\r\n            node.style[name] = value\r\n        } else if (arguments.length === 2) {\r\n            if (typeof name === 'string') {\r\n                //dom.style(div,'color')\r\n                return node.style[name]\r\n            } else if (name instanceof Object) {\r\n                //dom.style(div,{color：'red'})\r\n                const object = name\r\n                for (let key in object) {\r\n                    node.style[key] = object[key] //key可以是color border等\r\n                }\r\n            }\r\n        }\r\n\r\n    },\r\n\r\n\r\n    //添加类\r\n    class: {\r\n        add(node, className) { //增加\r\n            node.classList.add(className)\r\n        },\r\n        remove(node, className) { //删除\r\n            node.classList.remove(className)\r\n\r\n        },\r\n        contains(node, className) { //查找\r\n            return node.classList.contains(className)\r\n        }\r\n    },\r\n\r\n\r\n    //点击添加或者是删除\r\n    on(node, eventName, fn) {\r\n        node.addEventListener(eventName, fn)\r\n    },\r\n    off(node, eventName, fn) {\r\n        node.removeEventListener(eventName, fn)\r\n    },\r\n\r\n    //给一个ID返回它的信息\r\n    find(selector, scope) { //选取的范围\r\n        return (scope || document).querySelectorAll(selector)\r\n    },\r\n\r\n\r\n    //找父元素\r\n    parent(node) {\r\n        return node.parentNode\r\n    },\r\n    //找子元素\r\n    children(node) {\r\n        return node.children\r\n    },\r\n\r\n    //找到兄弟姐妹\r\n\r\n    siblings(node) {\r\n        return Array.from(node.parentNode.children)\r\n            .filter(n => n !== node)\r\n    },\r\n\r\n    //找弟弟\r\n    next(node) {\r\n        let x = node.nextSibling\r\n        while (x && x.nodeType === 3) { //判断是不是文本\r\n            x = x.nextSibling\r\n        }\r\n        return x\r\n    },\r\n\r\n\r\n    //找哥哥\r\n    previous(node) {\r\n        let x = node.previousSibling\r\n        while (x && x.nodeType === 3) {\r\n            x = x.previousSibling\r\n        }\r\n        return x\r\n\r\n\r\n    },\r\n\r\n\r\n\r\n    //遍历数组更改颜色\r\n\r\n    each(nodeList, fn) {\r\n        for (let i = 0; i < nodeList.length; i++) {\r\n            fn.call(null, nodeList[i])\r\n        }\r\n    },\r\n\r\n\r\n\r\n    //排行老几\r\n    index(node) {\r\n        const list = dom.children(node.parentNode)\r\n        let i\r\n        for (i = 0; i < list.length; i++) {\r\n            if (list[i] === node) {\r\n                break\r\n            }\r\n        }\r\n        return i\r\n\r\n\r\n    }\r\n\r\n};"]}